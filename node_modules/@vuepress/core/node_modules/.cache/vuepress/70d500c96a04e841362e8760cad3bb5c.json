{"remainingRequest":"/home/xjl/jiale/SeniorArchitect/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/xjl/jiale/SeniorArchitect/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/xjl/jiale/SeniorArchitect/node_modules/vue-loader/lib/index.js??ref--1-1!/home/xjl/jiale/SeniorArchitect/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/xjl/jiale/SeniorArchitect/docs/leetcode/015_三数之和.md?vue&type=template&id=0b9632d6&","dependencies":[{"path":"/home/xjl/jiale/SeniorArchitect/docs/leetcode/015_三数之和.md","mtime":1657290093389},{"path":"/home/xjl/jiale/SeniorArchitect/node_modules/cache-loader/dist/cjs.js","mtime":1657022965586},{"path":"/home/xjl/jiale/SeniorArchitect/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1657025278618},{"path":"/home/xjl/jiale/SeniorArchitect/node_modules/cache-loader/dist/cjs.js","mtime":1657022965586},{"path":"/home/xjl/jiale/SeniorArchitect/node_modules/vue-loader/lib/index.js","mtime":1657025278618},{"path":"/home/xjl/jiale/SeniorArchitect/node_modules/@vuepress/markdown-loader/index.js","mtime":1657022965437}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAi57uZ5L2g5LiA5Liq5YyF5ZCrIG4g5Liq5pW05pWw55qE5pWw57uEwqBudW1z77yM5Yik5patwqBudW1zwqDkuK3mmK/lkKblrZjlnKjkuInkuKrlhYPntKAgYe+8jGLvvIxjIO+8jOS9v+W+l8KgYSArIGIgKyBjID0gMCDvvJ/or7fkvaDmib7lh7rmiYDmnInlkozkuLogMCDkuJTkuI3ph43lpI3nmoTkuInlhYPnu4TjgIIiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIuazqOaEj++8muetlOahiOS4reS4jeWPr+S7peWMheWQq+mHjeWkjeeahOS4ieWFg+e7hOOAgiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX2MoImZvbnQiLCB7IGF0dHJzOiB7IGNvbG9yOiAiI0ZGMDAwIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCLpopjnm67pmr7luqY6IOKYheKYheKYhSwg5Lit562JIiksCiAgICAgICAgICBdKSwKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigi56S65L6LIDHvvJoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICLovpPlhaXvvJpudW1zID0gWy0xLDAsMSwyLC0xLC00XVxu6L6T5Ye677yaW1stMSwtMSwyXSxbLTEsMCwxXV1cbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCLnpLrkvosgMu+8miIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigi6L6T5YWl77yabnVtcyA9IFtdXG7ovpPlh7rvvJpbXVxuIildKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigi56S65L6LIDPvvJoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIui+k+WFpe+8mm51bXMgPSBbMF1cbui+k+WHuu+8mltdXG4iKV0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCLmj5DnpLrvvJoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCIwIDw9IG51bXMubGVuZ3RoIDw9IDMwMDBcbi0xMF41IDw9IG51bXNbaV0gPD0gMTBeNVxuIiksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICLop6PpopjmgJ3ot68iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI+ino+mimOaAnei3ryIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIg6Kej6aKY5oCd6LevIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIummluWFiOWvueaVsOe7hOi/m+ihjOaOkuW6j++8jOaOkuW6j+WQjuWbuuWumuS4gOS4quaVsCBudW1zW2ld77yM5YaN5L2/55So5bem5Y+z5oyH6ZKI5oyH5ZCRIG51bXNbaV3lkI7pnaLnmoTkuKTnq6/vvIzmlbDlrZfliIbliKvkuLogbnVtc1tsZWZ0XSDlkowgbnVtc1tyaWdodF3vvIzorqHnrpfkuInkuKrmlbDnmoTlkowgc3VtIOWIpOaWreaYr+WQpua7oei2s+S4uiAw77yM5ruh6Laz5YiZ5re75Yqg6L+b57uT5p6c6ZuGIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIuWmguaenCBudW1zW2ld5aSn5LqOIDDvvIzliJnkuInmlbDkuYvlkozlv4XnhLbml6Dms5XnrYnkuo4gMO+8jOe7k+adn+W+queOryIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIuWmguaenCBudW1zW2ldID0gbnVtc1tpLTFd77yM5YiZ6K+05piO6K+l5pWw5a2X6YeN5aSN77yM5Lya5a+86Ie057uT5p6c6YeN5aSN77yM5omA5Lul5bqU6K+l6Lez6L+HIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICLlvZMgc3VtID0gMCDml7bvvIxudW1zW2xlZnRdID0gbnVtc1tsZWZ0KzFdIOivtOaYjue7k+aenOmHjeWkje+8jOW6lOivpei3s+i/h2xlZnQrMe+8jGxlZnQrKyIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAi5b2TIHN1bSA9IDAg5pe277yMbnVtc1tyaWdodF0gPSBudW1zW3JpZ2h04oiSMV0g6K+05piO57uT5p6c6YeN5aSN77yM5bqU6K+l6Lez6L+HcmlnaHQtMe+8jHJpZ2h0LS0iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIuW9kyBzdW0gPCAwIOaXtiwg56e75YqobGVmdCwgbGVmdCsrIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCLlvZMgc3VtID4gMCDml7YsIOenu+WKqHJpZ2h0LCByaWdodC0tIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCLml7bpl7TlpI3mnYLluqbvvJpPKG5eMinvvIxuIOS4uuaVsOe7hOmVv+W6piIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJmb250IiwgeyBhdHRyczogeyBjb2xvcjogIiNGRjAwMCIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigi6L+Z6aKY55qE6YeN54K55piv6KaB5YWI5o6S5bqP77yM5o6S5bqP5ZCO5Zyo6YGN5Y6G77yM5Y+v5Lul6ZmN5L2O5pe26Ze05aSN5p2C5bqmIiksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigi44CCIiksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAi5Luj56CB5a6e546wIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiPku6PnoIHlrp7njrAiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIOS7o+eggeWunueOsCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAidGlwczog5Lul5LiL5Luj56CB5piv5L2/55SoR2/ku6PnoIHlrp7njrDnmoTkuI3lkIzop6Pms5UsIOaWh+eroOacgOWQjuWPr+S7peeci0MrK+OAgUPjgIFKYXZh44CBUHl0aG9u5a6e546wIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImZ1bmMgdGhyZWVTdW0obnVtcyBbXWludCkgW11bXWludCB7XG4gIHJlc3VsdCA6PSBtYWtlKFtdW11pbnQsIDApXG4gIGxlbmd0aCA6PSBsZW4obnVtcylcbiAgaWYgbGVuZ3RoIDwgMyB7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgc29ydC5JbnRzKG51bXMpXG4gIGkgOj0gMFxuICBmb3J7XG4gICAgaWYgaSA+PSBsZW5ndGgtMntcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIG51bXNbaV0gPiAwIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIGkgPiAwICYmIG51bXNbaV0gPT0gbnVtc1tpLTFde1xuICAgICAgaSArPSAxXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBsZWZ0IDo9IGkgKzFcbiAgICByaWdodCA6PSBsZW5ndGggLSAxXG5cbiAgICBmb3Ige1xuICAgICAgaWYgbGVmdCA+PSByaWdodHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHN1bSA6PSBudW1zW2ldICsgbnVtc1tsZWZ0XSArIG51bXNbcmlnaHRdXG5cbiAgICAgIGlmIHN1bSA9PSAwe1xuICAgICAgICByZXN1bHQgPSBhcHBlbmQocmVzdWx0LCBbXWludHtudW1zW2ldLCBudW1zW2xlZnRdLCBudW1zW3JpZ2h0XX0pXG4gICAgICAgIGZvciB7XG4gICAgICAgICAgaWYgbGVmdCA8IHJpZ2h0ICYmIG51bXNbbGVmdF0gPT0gbnVtc1tsZWZ0KzFde1xuICAgICAgICAgICAgbGVmdCArPSAxXG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBsZWZ0ICs9IDFcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBmb3J7XG4gICAgICAgICAgaWYgbGVmdCA8IHJpZ2h0ICYmIG51bXNbcmlnaHRdID09IG51bXNbcmlnaHQtMV17XG4gICAgICAgICAgICByaWdodCAtPTFcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJpZ2h0IC09IDFcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIHN1bSA8IDB7XG4gICAgICAgIGxlZnQgKz0gMVxuICAgICAgfVxuXG4gICAgICBpZiBzdW0gPiAwe1xuICAgICAgICByaWdodCAtPSAxXG4gICAgICB9XG4gICAgfVxuXG4gICAgaSArPSAxXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICJodHRwczovL2ltYWdlcy54aWFvemh1YW5sYW4uY29tL3VwbG9hZHMvcGhvdG8vMjAyMi80MjRhZDVhMi1lOWQ5LTQ5N2YtODRiMC02MzRlMjllMDdmMWUucG5nIWxhcmdlIiwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIuWFtuS7luivreiogOeJiOacrOWunueOsCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIj5YW25LuW6K+t6KiA54mI5pys5a6e546wIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIOWFtuS7luivreiogOeJiOacrOWunueOsCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiMeOAgUphdmEiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJjbGFzcyBTb2x1dGlvbiB7XG4gICAgcHVibGljIHN0YXRpYyBMaXN0PExpc3Q8SW50ZWdlcj4+IHRocmVlU3VtKGludFtdIG51bXMpIHtcbiAgICAgICAgTGlzdDxMaXN0PEludGVnZXI+PiBhbnMgPSBuZXcgQXJyYXlMaXN0KCk7XG4gICAgICAgIGludCBsZW4gPSBudW1zLmxlbmd0aDtcbiAgICAgICAgaWYobnVtcyA9PSBudWxsIHx8IGxlbiA8IDMpIHJldHVybiBhbnM7XG4gICAgICAgIEFycmF5cy5zb3J0KG51bXMpOyAvLyDmjpLluo9cbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBsZW4gOyBpKyspIHtcbiAgICAgICAgICAgIGlmKG51bXNbaV0gPiAwKSBicmVhazsgLy8g5aaC5p6c5b2T5YmN5pWw5a2X5aSn5LqOMO+8jOWImeS4ieaVsOS5i+WSjOS4gOWumuWkp+S6jjDvvIzmiYDku6Xnu5PmnZ/lvqrnjq9cbiAgICAgICAgICAgIGlmKGkgPiAwICYmIG51bXNbaV0gPT0gbnVtc1tpLTFdKSBjb250aW51ZTsgLy8g5Y676YeNXG4gICAgICAgICAgICBpbnQgTCA9IGkrMTtcbiAgICAgICAgICAgIGludCBSID0gbGVuLTE7XG4gICAgICAgICAgICB3aGlsZShMIDwgUil7XG4gICAgICAgICAgICAgICAgaW50IHN1bSA9IG51bXNbaV0gKyBudW1zW0xdICsgbnVtc1tSXTtcbiAgICAgICAgICAgICAgICBpZihzdW0gPT0gMCl7XG4gICAgICAgICAgICAgICAgICAgIGFucy5hZGQoQXJyYXlzLmFzTGlzdChudW1zW2ldLG51bXNbTF0sbnVtc1tSXSkpO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoTDxSICYmIG51bXNbTF0gPT0gbnVtc1tMKzFdKSBMKys7IC8vIOWOu+mHjVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoTDxSICYmIG51bXNbUl0gPT0gbnVtc1tSLTFdKSBSLS07IC8vIOWOu+mHjVxuICAgICAgICAgICAgICAgICAgICBMKys7XG4gICAgICAgICAgICAgICAgICAgIFItLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc3VtIDwgMCkgTCsrO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN1bSA+IDApIFItLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAgICAgICAgXG4gICAgICAgIHJldHVybiBhbnM7XG4gICAgfVxufVxuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiAiaHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS91cGxvYWRzL3Bob3RvLzIwMjIvMmI0ZDA4NzctM2FhZC00MmJhLWIxMjItNDNhMTFhZDYwMTM5LnBuZyFsYXJnZSIsCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiMuOAgUphdmFzY3JpcHQiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIvKipcbiAqIEBwYXJhbSB7bnVtYmVyW119IG51bXNcbiAqIEByZXR1cm4ge251bWJlcltdW119XG4gKi9cbnZhciB0aHJlZVN1bSA9IGZ1bmN0aW9uKG51bXMpIHtcbiAgICBsZXQgYW5zID0gW107XG4gICAgY29uc3QgbGVuID0gbnVtcy5sZW5ndGg7XG4gICAgaWYobnVtcyA9PSBudWxsIHx8IGxlbiA8IDMpIHJldHVybiBhbnM7XG4gICAgbnVtcy5zb3J0KChhLCBiKSA9PiBhIC0gYik7IC8vIOaOkuW6j1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuIDsgaSsrKSB7XG4gICAgICAgIGlmKG51bXNbaV0gPiAwKSBicmVhazsgLy8g5aaC5p6c5b2T5YmN5pWw5a2X5aSn5LqOMO+8jOWImeS4ieaVsOS5i+WSjOS4gOWumuWkp+S6jjDvvIzmiYDku6Xnu5PmnZ/lvqrnjq9cbiAgICAgICAgaWYoaSA+IDAgJiYgbnVtc1tpXSA9PSBudW1zW2ktMV0pIGNvbnRpbnVlOyAvLyDljrvph41cbiAgICAgICAgbGV0IEwgPSBpKzE7XG4gICAgICAgIGxldCBSID0gbGVuLTE7XG4gICAgICAgIHdoaWxlKEwgPCBSKXtcbiAgICAgICAgICAgIGNvbnN0IHN1bSA9IG51bXNbaV0gKyBudW1zW0xdICsgbnVtc1tSXTtcbiAgICAgICAgICAgIGlmKHN1bSA9PSAwKXtcbiAgICAgICAgICAgICAgICBhbnMucHVzaChbbnVtc1tpXSxudW1zW0xdLG51bXNbUl1dKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoTDxSICYmIG51bXNbTF0gPT0gbnVtc1tMKzFdKSBMKys7IC8vIOWOu+mHjVxuICAgICAgICAgICAgICAgIHdoaWxlIChMPFIgJiYgbnVtc1tSXSA9PSBudW1zW1ItMV0pIFItLTsgLy8g5Y676YeNXG4gICAgICAgICAgICAgICAgTCsrO1xuICAgICAgICAgICAgICAgIFItLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN1bSA8IDApIEwrKztcbiAgICAgICAgICAgIGVsc2UgaWYgKHN1bSA+IDApIFItLTtcbiAgICAgICAgfVxuICAgIH0gICAgICAgIFxuICAgIHJldHVybiBhbnM7XG59O1xuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiAiaHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS91cGxvYWRzL3Bob3RvLzIwMjIvNTE2NGU2Y2QtZTk4NS00NmNhLWEwZTctYWJkYmE4MzYwZTM4LnBuZyFsYXJnZSIsCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiM+OAgVB5dGhvbjMiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJjbGFzcyBTb2x1dGlvbjpcbiAgICBkZWYgdGhyZWVTdW0oc2VsZiwgbnVtczogTGlzdFtpbnRdKSAtPiBMaXN0W0xpc3RbaW50XV06XG4gICAgICAgIFxuICAgICAgICBuPWxlbihudW1zKVxuICAgICAgICByZXM9W11cbiAgICAgICAgaWYobm90IG51bXMgb3IgbjwzKTpcbiAgICAgICAgICAgIHJldHVybiBbXVxuICAgICAgICBudW1zLnNvcnQoKVxuICAgICAgICByZXM9W11cbiAgICAgICAgZm9yIGkgaW4gcmFuZ2Uobik6XG4gICAgICAgICAgICBpZihudW1zW2ldPjApOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgIGlmKGk+MCBhbmQgbnVtc1tpXT09bnVtc1tpLTFdKTpcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgTD1pKzFcbiAgICAgICAgICAgIFI9bi0xXG4gICAgICAgICAgICB3aGlsZShMPFIpOlxuICAgICAgICAgICAgICAgIGlmKG51bXNbaV0rbnVtc1tMXStudW1zW1JdPT0wKTpcbiAgICAgICAgICAgICAgICAgICAgcmVzLmFwcGVuZChbbnVtc1tpXSxudW1zW0xdLG51bXNbUl1dKVxuICAgICAgICAgICAgICAgICAgICB3aGlsZShMPFIgYW5kIG51bXNbTF09PW51bXNbTCsxXSk6XG4gICAgICAgICAgICAgICAgICAgICAgICBMPUwrMVxuICAgICAgICAgICAgICAgICAgICB3aGlsZShMPFIgYW5kIG51bXNbUl09PW51bXNbUi0xXSk6XG4gICAgICAgICAgICAgICAgICAgICAgICBSPVItMVxuICAgICAgICAgICAgICAgICAgICBMPUwrMVxuICAgICAgICAgICAgICAgICAgICBSPVItMVxuICAgICAgICAgICAgICAgIGVsaWYobnVtc1tpXStudW1zW0xdK251bXNbUl0+MCk6XG4gICAgICAgICAgICAgICAgICAgIFI9Ui0xXG4gICAgICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICAgICAgTD1MKzFcbiAgICAgICAgcmV0dXJuIHJlc1xuXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICJodHRwczovL2ltYWdlcy54aWFvemh1YW5sYW4uY29tL3VwbG9hZHMvcGhvdG8vMjAyMi8yMGMzOWViNy0yNDk3LTQ3MTctOWY5Ni1jN2YyYjZhYjY1ODMucG5nIWxhcmdlIiwKICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCI044CBQysrIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiY2xhc3MgU29sdXRpb24ge1xucHVibGljOlxuICAgIHZlY3Rvcjx2ZWN0b3I8aW50Pj4gdGhyZWVTdW0odmVjdG9yPGludD4mIG51bXMpIHtcbiAgICAgICAgaW50IG4gPSBudW1zLnNpemUoKTtcbiAgICAgICAgc29ydChudW1zLmJlZ2luKCksIG51bXMuZW5kKCkpO1xuICAgICAgICB2ZWN0b3I8dmVjdG9yPGludD4+IGFucztcbiAgICAgICAgLy8g5p6a5Li+IGFcbiAgICAgICAgZm9yIChpbnQgZmlyc3QgPSAwOyBmaXJzdCA8IG47ICsrZmlyc3QpIHtcbiAgICAgICAgICAgIC8vIOmcgOimgeWSjOS4iuS4gOasoeaemuS4vueahOaVsOS4jeebuOWQjFxuICAgICAgICAgICAgaWYgKGZpcnN0ID4gMCAmJiBudW1zW2ZpcnN0XSA9PSBudW1zW2ZpcnN0IC0gMV0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGMg5a+55bqU55qE5oyH6ZKI5Yid5aeL5oyH5ZCR5pWw57uE55qE5pyA5Y+z56uvXG4gICAgICAgICAgICBpbnQgdGhpcmQgPSBuIC0gMTtcbiAgICAgICAgICAgIGludCB0YXJnZXQgPSAtbnVtc1tmaXJzdF07XG4gICAgICAgICAgICAvLyDmnprkuL4gYlxuICAgICAgICAgICAgZm9yIChpbnQgc2Vjb25kID0gZmlyc3QgKyAxOyBzZWNvbmQgPCBuOyArK3NlY29uZCkge1xuICAgICAgICAgICAgICAgIC8vIOmcgOimgeWSjOS4iuS4gOasoeaemuS4vueahOaVsOS4jeebuOWQjFxuICAgICAgICAgICAgICAgIGlmIChzZWNvbmQgPiBmaXJzdCArIDEgJiYgbnVtc1tzZWNvbmRdID09IG51bXNbc2Vjb25kIC0gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIOmcgOimgeS/neivgSBiIOeahOaMh+mSiOWcqCBjIOeahOaMh+mSiOeahOW3puS+p1xuICAgICAgICAgICAgICAgIHdoaWxlIChzZWNvbmQgPCB0aGlyZCAmJiBudW1zW3NlY29uZF0gKyBudW1zW3RoaXJkXSA+IHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAtLXRoaXJkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyDlpoLmnpzmjIfpkojph43lkIjvvIzpmo/nnYAgYiDlkI7nu63nmoTlop7liqBcbiAgICAgICAgICAgICAgICAvLyDlsLHkuI3kvJrmnInmu6HotrMgYStiK2M9MCDlubbkuJQgYjxjIOeahCBjIOS6hu+8jOWPr+S7pemAgOWHuuW+queOr1xuICAgICAgICAgICAgICAgIGlmIChzZWNvbmQgPT0gdGhpcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChudW1zW3NlY29uZF0gKyBudW1zW3RoaXJkXSA9PSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5zLnB1c2hfYmFjayh7bnVtc1tmaXJzdF0sIG51bXNbc2Vjb25kXSwgbnVtc1t0aGlyZF19KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFucztcbiAgICB9XG59O1xuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiAiaHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS91cGxvYWRzL3Bob3RvLzIwMjIvZjY2ZmU2NTEtMzU2ZS00MGU1LWFiMzYtYjIxMzRlMTk4ZjIyLnBuZyFsYXJnZSIsCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICLkuI3nlKjor63oqIDniYjmnKzov5DooYzmg4XlhrXlr7nmr5QiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI+S4jeeUqOivreiogOeJiOacrOi/kOihjOaDheWGteWvueavlCIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiDkuI3nlKjor63oqIDniYjmnKzov5DooYzmg4XlhrXlr7nmr5QiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiAiaHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS91cGxvYWRzL3Bob3RvLzIwMjIvNzRmZGZjZWMtMTVmNy00ZDE4LTgyMmQtMmNkMzcyOGU5ZjM4LnBuZyFsYXJnZSIsCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigi5Lmf5qyi6L+O5YWz5rOo5oiR55qE5YWs5LyX5Y+3OiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIuW6hOWwj+eEsSIpXSksCiAgICAgICAgX3ZtLl92KCLjgIIg5LiA6LW35Lqk5rWBLCDlnKhjb2RpbmfnmoTkuJbnlYzph4zmvKvmraXjgIIiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiAiaHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS91cGxvYWRzL3Bob3RvLzIwMjIvNWNiMGM5MWUtZmQ4My00YTA0LThkZjYtNjVmYjYwMmIzODM0LnBuZyIsCiAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}